# focus window
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east

# swap managed window
shift + alt - h : yabai -m window --swap west
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
shift + alt - l : yabai -m window --swap east

# move managed window
shift + alt + ctrl - h : yabai -m window --warp west
shift + alt + ctrl - j : yabai -m window --warp south
shift + alt + ctrl - k : yabai -m window --warp north
shift + alt + ctrl - l : yabai -m window --warp east

# rotate tree
alt - r : yabai -m space --rotate 90

# toggle window fullscreen zoom
alt - f : yabai -m window --toggle zoom-fullscreen

# alt - s : yabai -m window --toggle
alt - s : yabai -m window --toggle sticky;\
          yabai -m window --toggle topmost;\
          yabai -m window --toggle pip

# toggle padding and gap
alt - g : yabai -m space --toggle padding; yabai -m space --toggle gap

# float / unfloat window and center on screen
alt - t : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

# toggle window split type
alt - e : yabai -m window --toggle split

# balance size of windows
shift + alt - 0 : yabai -m space --balance

# move window and focus desktop
shift + alt - 1 : yabai -m window --space 1; yabai -m space --focus 1
shift + alt - 2 : yabai -m window --space 2; yabai -m space --focus 2
shift + alt - 3 : yabai -m window --space 3; yabai -m space --focus 3
shift + alt - 4 : yabai -m window --space 4; yabai -m space --focus 4
shift + alt - 5 : yabai -m window --space 5; yabai -m space --focus 5
shift + alt - 6 : yabai -m window --space 6; yabai -m space --focus 6
shift + alt - 7 : yabai -m window --space 7; yabai -m space --focus 7
shift + alt - 8 : yabai -m window --space 8; yabai -m space --focus 8
shift + alt - 9 : yabai -m window --space 9; yabai -m space --focus 9


# create desktop, move window and follow focus
shift + alt - n : yabai -m space --create && \
                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
                   yabai -m window --space "${index}" && \
                   yabai -m space --focus "${index}"

# fast focus desktop
alt - tab : yabai -m space --focus recent

# send window to monitor and follow focus
shift + alt - n : yabai -m window --display next; yabai -m display --focus next
shift + alt - p : yabai -m window --display previous; yabai -m display --focus previous

# send focus to previous window
alt - p : yabai -m window --focus prev

# NB: For these two keybinds to be functional, you need
# to bind them to something in system preferences > keyboard.
# The reason for this is, skhd uses the public a11y API
# and for obvious security reasons, any "password" field
# on the system in the browser or otherwise will not emit
# events that can be consumed by said public API.
#
# Setting a system-level keybind to something like spotlight
# is a hack to sorta bypass this. I don't use spotlight
# anyway so, in essence, when pressed, the AXUIElement
# (password field) will remain in focus but spotlight (or
# whatever) will be brought in focus, and then out of focus
# again by "pmenu"/alacritty. When the process exits, the
# previous window and element is brought back into focus so
# keypresses can be automated.
#
# My system binds
# CMD + shift + p:
# "Spotlight" > "Show Spotlight Search"
# CMD + shift + o:
# "Launchpad" > "Show Launchpad"
shift + cmd - p : $HOME/bin/pmenu -pc
cmd - p : $HOME/bin/pmenu -p # I don't print lol
cmd - o : $HOME/bin/pmenu -o
cmd - u : $HOME/bin/pmenu -u
cmd - space : /Applications/dmenu-mac.app/Contents/MacOS/dmenu-mac --exit
